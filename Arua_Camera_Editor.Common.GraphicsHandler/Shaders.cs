using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using System;

namespace Arua_Camera_Editor.Common.GraphicsHandler
{
	internal class Shaders
	{
		public const string terainShader = "float4x4 WorldViewProjection; \r\n    texture Texture1; \r\n    sampler Texture1Sampler = sampler_state \r\n    { \r\n\tTexture = <Texture1>; \r\n\t}; \r\n\ttexture Texture2; \r\n\tsampler Texture2Sampler = sampler_state \r\n\t{ \r\n\t\tTexture = <Texture2>; \r\n\t}; \r\n\tstruct VertexInput \r\n\t{ \r\n\t\tfloat4 Position : POSITION0; \r\n\t\tfloat2 Text1Coord : TEXCOORD0; \r\n\t\tfloat2 Text2Coord : TEXCOORD1; \r\n\t}; \r\n\tstruct VertexOutput \r\n\t{ \r\n\t\tfloat4 Position : POSITION0; \r\n\t\tfloat2 Text1Coord : TEXCOORD0; \r\n\t\tfloat2 Text2Coord : TEXCOORD1; \r\n\t}; \r\n    VertexOutput vertexShaderFunction(VertexInput input) \r\n    { \r\n    VertexOutput output; \r\n    output.Position = mul(input.Position,WorldViewProjection); \r\n    output.Text1Coord = input.Text1Coord; \r\n    output.Text2Coord = input.Text2Coord; \r\n    return output; \r\n    } \r\n    struct PixelInput \r\n    { \r\n    float2 Text1Coord : TEXCOORD0; \r\n    float2 Text2Coord : TEXCOORD1; \r\n    }; \r\n\t\t\t\t\t\t\r\n    float4 pixelShaderFunction(PixelInput input) : COLOR \r\n    {\r\n        float4 texture1 = tex2D(Texture1Sampler,input.Text1Coord);\t    \r\n\t    float4 texture2 = tex2D(Texture2Sampler,input.Text2Coord);\r\n        float4 finalTexture = float4(0.0, 0.0, 0.0, 0.0);\r\n        finalTexture.r = (texture1.r + texture2.a * (texture2.r - texture1.r));\r\n        finalTexture.g = (texture1.g + texture2.a * (texture2.g - texture1.g));\r\n        finalTexture.b = (texture1.b + texture2.a * (texture2.b - texture1.b));\r\n        finalTexture.a = (1.0f + texture2.a * 1.0f);\r\n        return finalTexture; \r\n    } \r\n\t\r\n\ttechnique Default\r\n\t{ \r\n\t    pass pass1 \r\n\t    { \r\n\t\t    VertexShader = compile vs_1_1 vertexShaderFunction(); \r\n\t\t    PixelShader = compile ps_2_0 pixelShaderFunction(); \r\n\t    } \r\n\t}";

		public const string objectShader = "float4x4 Projection;\r\n    float4x4 View;\r\n    float4x4 World : WORLD;\r\n    float4x4 WorldViewProjection : WORLDVIEWPROJECTION; \r\n    texture zmsTexture; \r\n    sampler TextureSampler = sampler_state \r\n    { \r\n    texture = <zmsTexture>;     \r\n    }; \r\n    struct VertexInput \r\n\t    { \r\n\t    float4 Position : POSITION0; \r\n\t    float2 TextCoord : TEXCOORD0;\r\n            \t\t\t\r\n\t    }; \r\n    struct VertexOutput \r\n\t    { \r\n\t    float4 Position : POSITION0; \r\n\t    float2 TextCoord : TEXCOORD0;\t\t\r\n            \r\n\t    }; \r\n    VertexOutput vertexShaderFunction(VertexInput input) \r\n    {\r\n    VertexOutput output; \r\n    WorldViewProjection = mul(mul(World,View),Projection);\r\n    output.Position = mul(input.Position,WorldViewProjection); \r\n    output.TextCoord = input.TextCoord; \r\n    return( output ); \r\n    } \r\n    struct PixelInput \r\n    { \r\n    float2 TextCoord : TEXCOORD0;\r\n    };\r\n\r\n    float4 pixelShaderFunction(PixelInput input) : COLOR \r\n    {\r\n    return tex2D(TextureSampler,input.TextCoord); \r\n    } \r\n\r\n    technique Default\r\n    { \r\n\t    pass P0 \r\n\t    { \r\n\t\t    VertexShader = compile vs_1_1 vertexShaderFunction(); \r\n\t\t    PixelShader = compile ps_2_0 pixelShaderFunction(); \r\n\t    } \r\n    }\r\n        ";

		public static Effect CreateTerrainEffect(GraphicsDevice device)
		{
			byte[] effectCode = Effect.CompileEffectFromSource("float4x4 WorldViewProjection; \r\n    texture Texture1; \r\n    sampler Texture1Sampler = sampler_state \r\n    { \r\n\tTexture = <Texture1>; \r\n\t}; \r\n\ttexture Texture2; \r\n\tsampler Texture2Sampler = sampler_state \r\n\t{ \r\n\t\tTexture = <Texture2>; \r\n\t}; \r\n\tstruct VertexInput \r\n\t{ \r\n\t\tfloat4 Position : POSITION0; \r\n\t\tfloat2 Text1Coord : TEXCOORD0; \r\n\t\tfloat2 Text2Coord : TEXCOORD1; \r\n\t}; \r\n\tstruct VertexOutput \r\n\t{ \r\n\t\tfloat4 Position : POSITION0; \r\n\t\tfloat2 Text1Coord : TEXCOORD0; \r\n\t\tfloat2 Text2Coord : TEXCOORD1; \r\n\t}; \r\n    VertexOutput vertexShaderFunction(VertexInput input) \r\n    { \r\n    VertexOutput output; \r\n    output.Position = mul(input.Position,WorldViewProjection); \r\n    output.Text1Coord = input.Text1Coord; \r\n    output.Text2Coord = input.Text2Coord; \r\n    return output; \r\n    } \r\n    struct PixelInput \r\n    { \r\n    float2 Text1Coord : TEXCOORD0; \r\n    float2 Text2Coord : TEXCOORD1; \r\n    }; \r\n\t\t\t\t\t\t\r\n    float4 pixelShaderFunction(PixelInput input) : COLOR \r\n    {\r\n        float4 texture1 = tex2D(Texture1Sampler,input.Text1Coord);\t    \r\n\t    float4 texture2 = tex2D(Texture2Sampler,input.Text2Coord);\r\n        float4 finalTexture = float4(0.0, 0.0, 0.0, 0.0);\r\n        finalTexture.r = (texture1.r + texture2.a * (texture2.r - texture1.r));\r\n        finalTexture.g = (texture1.g + texture2.a * (texture2.g - texture1.g));\r\n        finalTexture.b = (texture1.b + texture2.a * (texture2.b - texture1.b));\r\n        finalTexture.a = (1.0f + texture2.a * 1.0f);\r\n        return finalTexture; \r\n    } \r\n\t\r\n\ttechnique Default\r\n\t{ \r\n\t    pass pass1 \r\n\t    { \r\n\t\t    VertexShader = compile vs_1_1 vertexShaderFunction(); \r\n\t\t    PixelShader = compile ps_2_0 pixelShaderFunction(); \r\n\t    } \r\n\t}", null, null, CompilerOptions.None, TargetPlatform.Windows).GetEffectCode();
			return new Effect(device, effectCode, CompilerOptions.None, null);
		}

		public static Effect CreateObjectEffect(GraphicsDevice device)
		{
			byte[] effectCode = Effect.CompileEffectFromSource("float4x4 Projection;\r\n    float4x4 View;\r\n    float4x4 World : WORLD;\r\n    float4x4 WorldViewProjection : WORLDVIEWPROJECTION; \r\n    texture zmsTexture; \r\n    sampler TextureSampler = sampler_state \r\n    { \r\n    texture = <zmsTexture>;     \r\n    }; \r\n    struct VertexInput \r\n\t    { \r\n\t    float4 Position : POSITION0; \r\n\t    float2 TextCoord : TEXCOORD0;\r\n            \t\t\t\r\n\t    }; \r\n    struct VertexOutput \r\n\t    { \r\n\t    float4 Position : POSITION0; \r\n\t    float2 TextCoord : TEXCOORD0;\t\t\r\n            \r\n\t    }; \r\n    VertexOutput vertexShaderFunction(VertexInput input) \r\n    {\r\n    VertexOutput output; \r\n    WorldViewProjection = mul(mul(World,View),Projection);\r\n    output.Position = mul(input.Position,WorldViewProjection); \r\n    output.TextCoord = input.TextCoord; \r\n    return( output ); \r\n    } \r\n    struct PixelInput \r\n    { \r\n    float2 TextCoord : TEXCOORD0;\r\n    };\r\n\r\n    float4 pixelShaderFunction(PixelInput input) : COLOR \r\n    {\r\n    return tex2D(TextureSampler,input.TextCoord); \r\n    } \r\n\r\n    technique Default\r\n    { \r\n\t    pass P0 \r\n\t    { \r\n\t\t    VertexShader = compile vs_1_1 vertexShaderFunction(); \r\n\t\t    PixelShader = compile ps_2_0 pixelShaderFunction(); \r\n\t    } \r\n    }\r\n        ", null, null, CompilerOptions.None, TargetPlatform.Windows).GetEffectCode();
			return new Effect(device, effectCode, CompilerOptions.None, null);
		}
	}
}
